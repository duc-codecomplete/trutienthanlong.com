<?php

namespace system\data\character;

class character
{

    static $pack = array(
        "getRole" => 0x1F43,
        "putRole" => 0x1F42,
        'GMRoleOnline' => 0x160,
        'forbid' => 0x168,
        'chatCharForbid' => 0x16A,
        'chatAccForbid' => 0x164,
        'accForbid' => 0x162,
        'GetUserRoles' => 0xD49,
        'RenameRole' => 0xD4C,
        'DeleteRole' => 0xBC0,
        'DebugAddCash' => 0x209,
        'sendMail' => 0x1076,
    );

    static $structure = array(
        'role' => array(
            'base' => array(
                'bversion' => 'byte',
                'id' => 'int32',
                'name' => 'string',
                'race' => 'int32',
                'cls' => 'int32',
                'gender' => 'byte',
                'custom_data' => 'octets',
                'config_data' => 'octets',
                'custom_stamp' => 'int32',
                'status' => 'byte',
                'delete_time' => 'int32',
                'create_time' => 'int32',
                'lastlogin_time' => 'int32',
                'forbidcount' => 'cuint',
                'forbid' => array(
                    'type' => 'byte',
                    'time' => 'int32',
                    'createtime' => 'int32',
                    'reason' => 'string',
                ),
                'help_states' => 'octets',
                'spouse' => 'int32',
                'userid' => 'int32',
                'cross_data' => 'octets',
                'reserved2' => 'octets',
                'reserved3' => 'octets',
                'reserved4' => 'octets',
            ),
            'status' => array(
                'sversion' => 'byte',
                'level' => 'int32',
                'level2' => 'int32',
                'exp' => 'int32',
                'sp' => 'int32',
                'pp' => 'int32',
                'hp' => 'int32',
                'mp' => 'int32',
                'posx' => 'float',
                'posy' => 'float',
                'posz' => 'float',
                'worldtag' => 'int32',
                'invader_state' => 'int32',
                'invader_time' => 'int32',
                'pariah_time' => 'int32',
                'reputation' => 'int32',
                'custom_status' => 'octets',
                'filter_data' => 'octets',
                'charactermode' => 'octets',
                'instancekeylist' => 'octets',
                'dbltime_expire' => 'int32',
                'dbltime_mode' => 'int32',
                'dbltime_begin' => 'int32',
                'dbltime_used' => 'int32',
                'dbltime_max' => 'int32',
                'time_used' => 'int32',
                'dbltime_data' => 'octets',
                'storesize' => 'int16',
                'petcorral' => 'octets',
                'property' => 'octets',
                'var_data' => 'octets',
                'skills' => 'octets',
                'storehousepasswd' => 'octets',
                'waypointlist' => 'octets',
                'coolingtime' => 'octets',
                'npc_relation' => 'octets',
                'multi_exp_ctrl' => 'octets',
                'storage_task' => 'octets',
                'faction_contrib' => 'octets',
                'force_data' => 'octets',
                'online_award' => 'octets',
                'profit_time_data' => 'octets',
                'country_data' => 'octets',
                'king_data' => 'octets',
                'meridian_data' => 'octets',
                'extraprop' => 'octets',
                'title_data' => 'octets',
                'reincarnation_data' => 'octets',
                'realm_data' => 'octets',
                'reserved2' => 'byte',
                'reserved3' => 'byte',
            ),
            'pocket' => array(
                'icapacity' => 'int32',
                'timestamp' => 'int32',
                'money' => 'int32',
                'invcount' => 'cuint',
                'inv' => array(
                    'id' => 'int32',
                    'pos' => 'int32',
                    'count' => 'int32',
                    'max_count' => 'int32',
                    'data' => 'octets',
                    'proctype' => 'int32',
                    'expire_date' => 'int32',
                    'guid1' => 'int32',
                    'guid2' => 'int32',
                    'mask' => 'int32'
                ),
                'reserved6' => 'int32',
                'reserved7' => 'int32',
            ),
            'equipment' => array(
                'eqpcount' => 'cuint',
                'eqp' => array(
                    'id' => 'int32',
                    'pos' => 'int32',
                    'count' => 'int32',
                    'max_count' => 'int32',
                    'data' => 'octets',
                    'proctype' => 'int32',
                    'expire_date' => 'int32',
                    'guid1' => 'int32',
                    'guid2' => 'int32',
                    'mask' => 'int32'
                ),
            ),
            'storehouse' => array(
                'capacity' => 'int32',
                'money' => 'int32',
                'storecount' => 'cuint',
                'store' => array(
                    'id' => 'int32',
                    'pos' => 'int32',
                    'count' => 'int32',
                    'max_count' => 'int32',
                    'data' => 'octets',
                    'proctype' => 'int32',
                    'expire_date' => 'int32',
                    'guid1' => 'int32',
                    'guid2' => 'int32',
                    'mask' => 'int32'
                ),
                'size1' => 'byte',
                'size2' => 'byte',
                'dresscount' => 'cuint',
                'dress' => array(
                    'id' => 'int32',
                    'pos' => 'int32',
                    'count' => 'int32',
                    'max_count' => 'int32',
                    'data' => 'octets',
                    'proctype' => 'int32',
                    'expire_date' => 'int32',
                    'guid1' => 'int32',
                    'guid2' => 'int32',
                    'mask' => 'int32'
                ),
                'materialcount' => 'cuint',
                'material' => array(
                    'id' => 'int32',
                    'pos' => 'int32',
                    'count' => 'int32',
                    'max_count' => 'int32',
                    'data' => 'octets',
                    'proctype' => 'int32',
                    'expire_date' => 'int32',
                    'guid1' => 'int32',
                    'guid2' => 'int32',
                    'mask' => 'int32'
                ),
                'size3' => 'byte',
                'cardcount' => 'cuint',
                'card' => array(
                    'id' => 'int32',
                    'pos' => 'int32',
                    'count' => 'int32',
                    'max_count' => 'int32',
                    'data' => 'octets',
                    'proctype' => 'int32',
                    'expire_date' => 'int32',
                    'guid1' => 'int32',
                    'guid2' => 'int32',
                    'mask' => 'int32'
                ),
                'reserved' => 'int16',
            ),
            'task' => array(
                'task_data' => 'octets',
                'task_complete' => 'octets',
                'task_finishtime' => 'octets',
                'task_inventorycount' => 'cuint',
                'task_inventory' => array(
                    'id' => 'int32',
                    'pos' => 'int32',
                    'count' => 'int32',
                    'max_count' => 'int32',
                    'data' => 'octets',
                    'proctype' => 'int32',
                    'expire_date' => 'int32',
                    'guid1' => 'int32',
                    'guid2' => 'int32',
                    'mask' => 'int32',
                ),
            )
        )
    );

    static $addons = array(
        "var_data" => array(
            'vd_version' => 'int32sm',
            'pk_count' => 'int32sm',
            'pvp_cooldown' => 'int32sm',
            'pvp_flag' => 'byte',
            'dead_flag' => 'byte',
            'is_drop' => 'byte',
            'resurrect_state' => 'byte',
            'resurrect_exp_reduce' => 'float-sm',
            'instance_hash_key1' => 'int32sm',
            'instance_hash_key2' => 'int32sm',
            'trashbox_size' => 'int32sm',
            'last_instance_timestamp' => 'int32sm',
            'last_instance_tag' => 'int32sm',
            'last_instance_pos' => array(
                'x' => 'float-sm',
                'y' => 'float-sm',
                'z' => 'float-sm',
            ),
            'dir' => 'int32sm',
            'resurrect_hp_factor' => 'float-sm',
            'resurrect_mp_factor' => 'float-sm',
            "instance_reenter" => 'int32sm',
            "last_world_type" => 'int32sm',
            "last_logout_pos" => array(
                "x" => 'float-sm',
                "y" => 'float-sm',
                "z" => 'float-sm',
            ),
        ),
//        "custom_data" => array(
//            "Header" => 'int32rev',
//            "Parts" => array(
//                "scaleUp" => 'byte',
//                "scaleMiddle" => 'byte',
//                "scaleDown" => 'byte',
//            ),
//            "BlendFace" => array(
//                "idFaceShape1" => 'int16',
//                "idFaceShape2" => 'int16',
//                "blendFaceShape" => 'int16',
//            ),
//            "Face" => array(
//                "scaleFaceH" => 'byte',
//                "scaleFaceV" => 'byte',
//                "idFaceTex" => 'int16',
//            ),
//            "Forehead" => array(
//                "offsetForeheadH" => 'int16',
//                "offsetForeheadV" => 'byte',
//                "offsetForeheadZ" => 'byte',
//                "rotateForehead" => 'byte',
//                "scaleForehead" => 'byte',
//            ),
//            "YokeBone" => array(
//                "offsetYokeBoneH" => 'byte',
//                "offsetYokeBoneV" => 'byte',
//                "offsetYokeBoneZ" => 'byte',
//                "rotateYokeBone" => 'byte',
//                "scaleYokeBone" => 'byte',
//            ),
//            "Cheek" => array(
//                "offsetCheekH" => 'byte',
//                "offsetCheekV" => 'byte',
//                "offsetCheekZ" => 'byte',
//                "scaleCheek" => 'byte',
//            ),
//            "Chain" => array(
//                "offsetChainV" => 'byte',
//                "offsetChainZ" => 'byte',
//                "rotateChain" => 'byte',
//                "scaleChainH" => 'byte',
//            ),
//            "Jaw" => array(
//                "offsetJawH" => 'byte',
//                "offsetJawV" => 'byte',
//                "offsetJawZ" => 'byte',
//                "scaleJawSpecial" => 'byte',
//                "scaleJawH" => 'byte',
//                "scaleJawV" => 'byte',
//            ),
//            "Eye" => array(
//                "idEyeShape" => 'byte',
//                "idEyeBaseTex" => 'int16',
//                "idEyeHighTex" => 'int16',
//                "idThirdEye" => 'byte',
//                "idEyeBallTex" => 'int16rev',
//                "scaleEyeH" => 'byte',
//                "scaleEyeV" => 'byte',
//                "rotateEye" => 'byte',
//                "offsetEyeH" => 'byte',
//                "offsetEyeV" => 'byte',
//                "offsetEyeZ" => 'byte',
//                "scaleEyeBall" => 'byte',
//                "scaleEyeH2" => 'byte',
//                "scaleEyeV2" => 'byte',
//                "rotateEye2" => 'byte',
//                "offsetEyeH2" => 'byte',
//                "offsetEyeV2" => 'byte',
//                "offsetEyeZ2" => 'byte',
//                "scaleEyeBall2" => 'byte',
//            ),
//            "Brow" => array(
//                "idBrowTex" => 'int16rev',
//                "idBrowShape" => 'int16rev',
//                "scaleBrowH" => 'byte',
//                "scaleBrowV" => 'byte',
//                "rotateBrow" => 'byte',
//                "offsetBrowH" => 'byte',
//                "offsetBrowV" => 'byte',
//                "offsetBrowZ" => 'byte',
//                "scaleBrowH2" => 'byte',
//                "scaleBrowV2" => 'byte',
//                "rotateBrow2" => 'byte',
//                "offsetBrowH2" => 'byte',
//                "offsetBrowV2" => 'byte',
//                "offsetBrowZ2" => 'byte',
//            ),
//            "Nose" => array(
//                "idNoseTex" => 'int16rev',
//                "idNoseTipShape" => 'int16rev',
//                "scaleNoseTipH" => 'byte',
//                "scaleNoseTipV" => 'byte',
//                "offsetNoseTipV" => 'byte',
//                "scaleNoseTipZ" => 'byte',
//                "idNoseBridgeShap" => 'int16rev',
//                "scaleBridgeTipH" => 'byte',
//                "offsetBridgeTipZ" => 'byte',
//            ),
//            "Mouth" => array(
//                "idMouthUpLipLine" => 'int16rev',
//                "idMouthMidLipLine" => 'int16rev',
//                "idMouthDownLipLine" => 'int16rev',
//                "thickUpLip" => 'byte',
//                "thickDownLip" => 'byte',
//                "offsetMouthV" => 'byte',
//                "offsetMouthZ" => 'byte',
//                "idMouthTex" => 'int16rev',
//                "scaleMouthH" => 'byte',
//                "scaleMouthH2" => 'byte',
//                "offsetCornerOfMouthSpecial" => 'byte',
//                "offsetCornerOfMouthSpecial2" => 'byte',
//            ),
//            "Ear" => array(
//                "idEarShape" => 'int16rev',
//                "scaleEar" => 'byte',
//                "offsetEarV" => 'byte',
//            ),
//            "Hair" => array(
//                "idHairModel" => 'int16rev',
//                "idHairTex" => 'int16rev',
//            ),
//            "Moustache" => array(
//                "idMoustacheTex" => 'int16rev',
//                "idMoustacheSkin" => 'int16rev',
//                "idGoateeTex" => 'int16rev',
//            ),
//            "Faling" => array(
//                "idFalingSkin" => 'int16rev',
//                "idFalingTex" => 'int16rev',
//            ),
//            "Body" => array(
//                "bodyID" => 'int16rev',
//                "colorFace" => 'color',
//                "colorEye" => 'color',
//                "colorBrow" => 'color',
//                "colorMouth" => 'color',
//                "colorHair" => 'color',
//                "colorEyeBall" => 'color',
//                "colorMoustache" => 'color',
//                "Unknown2" => 'int32rev',
//                "Unknown3" => 'int32rev',
//                "colorBody" => 'color',
//                "headScale" => 'byte',
//                "upScale" => 'byte',
//                "waistScale" => 'byte',
//                "armWidth" => 'byte',
//                "legWidth" => 'byte',
//                "breastScale" => 'byte',
//                "unknownFore" => 'byte',
//                "unknownFite" => 'byte',
//            )
//        ),
        "property" => array(
            "vitality" => 'int32sm',
            "energy" => 'int32sm',
            "strength" => 'int32sm',
            "agility" => 'int32sm',
            "max_hp" => 'int32sm',
            "max_mp" => 'int32sm',
            "hp_gen" => 'int32sm',
            "mp_gen" => 'int32sm',
            "walk_speed" => 'float-sm',
            "run_speed" => 'float-sm',
            "swim_speed" => 'float-sm',
            "flight_speed" => 'float-sm',
            "attack" => 'int32sm',
            "damage_low" => 'int32sm',
            "damage_high" => 'int32sm',
            "attack_speed" => 'int32sm',
            "attack_range" => 'float-sm',
            "addon_damage_low" => array(
                "metal" => 'int32sm',
                "tree" => 'int32sm',
                "water" => 'int32sm',
                "fire" => 'int32sm',
                "ground" => 'int32sm',
            ),
            "addon_damage_high" => array(
                "metal" => 'int32sm',
                "tree" => 'int32sm',
                "water" => 'int32sm',
                "fire" => 'int32sm',
                "ground" => 'int32sm',
            ),
            "damage_magic_low" => 'int32sm',
            "damage_magic_high" => 'int32sm',
            "resistance" => array(
                "metal" => 'int32sm',
                "tree" => 'int32sm',
                "water" => 'int32sm',
                "fire" => 'int32sm',
                "ground" => 'int32sm',
            ),
            "defense" => 'int32sm',
            "armor" => 'int32sm',
            "max_ap" => 'int32sm',
        ),
//        "force_data" => array(
//            'cur_force_id' => 'int32',
//            'forcecount' => 'cuint',
//            'force' => array(
//                'force_id' => 'int32',
//                'reputation' => 'int32',
//                'contribution' => 'int32',
//                'ro' => 'int32',
//                'rt' => 'int32',
//                'rf' => 'int32',
//                'rfo' => 'int32',
//                'rfi' => 'int32',
//                'rs' => 'int32',
//                'rse' => 'int32',
//            ),
//            'revo' => 'int32',
//            'revt' => 'int32',
//            'revf' => 'int32',
//        ),
//        "faction_contrib" => array(
//            'consume_contrib' => 'int32sm',
//            'exp_contrib' => 'int32sm',
//            'cumulate_contrib' => 'int32sm',
//        ),
        "title_data" => array(
            "current_title" => 'int16sm',
            "count_title" => 'cuint32sm',
            "title_list" => array(
                "id" => 'int16rev',
            ),
            "expire_count" => "cuint32sm",
            "expire_title" => array(
                "id" => 'int16sm',
                "date" => 'int32sm',
            ),
        ),
        "meridian_data" => array(
            "lvl" => 'int32',
            "life_dot" => 'int32',
            "die_dot" => 'int32',
            "free_up" => 'int32',
            "paid_up" => 'int32',
            "login_time" => 'int32',
            "login_days" => 'int32',
            "trigrams_map1" => 'int32',
            "trigrams_map2" => 'int32',
            "trigrams_map3" => 'int32',
            "reserved1" => 'int32',
            "reserved2" => 'int32',
            "reserved3" => 'int32',
            "reserved4" => 'int32',
        ),

//        "task_complete" => array(
//            "count" => 'cuint',
//            "ids" => array(
//                "id" => "int16sm",
//                "ide" => "byte",
//                "idt" => "byte"
//            ),
//        ),
    );

    static $items = array(
        "weapon" => array(
            "level" => 'int16sm',
            "class" => 'int16sm',
            "strong" => 'int16sm',
            "endurance" => 'int16sm',
            "agility" => 'int16sm',
            "intellect" => 'int16sm',
            "strength" => 'int32sm',
            "maxStrength" => 'int32sm',
            "itemClass" => 'int16sm',
            "itemFlag" => 'byte',
            "creator" => 'string',
            "NeedAmmo" => 'int32sm',
            "WeaponClass" => 'int32sm',
            "Rang" => 'int32sm',
            "AmmoType" => 'int32sm',
            "MinPhysAtk" => 'int32sm',
            "MaxPhysAtk" => 'int32sm',
            "MinMagAtk" => 'int32sm',
            "MaxMagAtk" => 'int32sm',
            "AtkSpeed" => 'int32sm',
            "Distance" => 'float-sm',
            "FragDistance" => 'float-sm',
            "cellInfo" => array(
                "cellCount" => 'cuint16sm',
                "cellFlag" => 'int16sm',
                "cellStone" => array(
                    "id" => 'int32sm',
                ),
            ),
            "BonusInfo" => array(
                "count" => 'cuint32sm',
                "bonus" => array(
                    "id" => 'int32sm',
                    "type" => '0',
                    "stat" => 'int32sm',
                    "dopStat1" => 'int32sm',
                    "dopStat2" => 'int32sm',
                ),
            ),
            //"EnableDopInt" => '',
            //"dopint" => 'int32sm',
        ),

        "fly" => array(
            "cur_time" => 'int32sm',
            "max_time" => 'int32sm',
            "require_level" => 'int16sm',
            "element_level" => 'int16sm',
            "require_class" => 'int32sm',
            "time_per_element" => 'int32sm',
            "speed_increase1" => 'float-sm',
            "speed_increase2" => 'float-sm',
            "flag" => 'byte',
            "creator" => 'string',
            "unk" => 'int16sm',
        ),
    );

    static $functions = array(
        'GMRoleOnline' => array(
          //  'type' => "cuint-nc",
            //'answlen' => "cuint-nc",
            'retcode' => "int32",
            'gmroleid' => "int32",
            'localsid' => "int32",
            'handler' => "int32",
            'count' => "cuint",
            'users' => array(
                'userid' => "int32",
                'roleid' => "int32",
                'linkid' => "int32",
                'localsid' => "int32",
                'gsid' => "int32",
                'status' => "byte",
                'name' => "string",
            )
        ),
        'GetUserRoles' => array(
            'count' => "cbyte",
            'roles' => array(
                'id' => "int32",
                'name' => "string",
            )
        ),

    );
}